package pdl.backend.controller;

import java.io.IOException;
import java.util.Optional;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import pdl.backend.mysqldb.Image;
import pdl.backend.mysqldb.ImageRepository;
import pdl.backend.mysqldb.User;
import pdl.backend.mysqldb.UserRepository;
import pdl.processing.ImageManager;

@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(path = "/user") // This means URL's start with /user (after Application path)
public class UserController {
    @Autowired
    private ObjectMapper mapper;

    @Autowired
    private ImageRepository imageRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    /*
     * @PostMapping(path = "/add") // Map ONLY POST Requests public @ResponseBody
     * String addNewUser(@RequestParam final String name, @RequestParam final String
     * email) { // @ResponseBody means the returned String is the response, not a
     * view name // @RequestParam means it is a parameter from the GET or POST
     * request
     *
     * final User n = new User(name, email); userRepository.save(n); return "Saved";
     * }
     */

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_USER_PREMIUM') or hasRole('ROLE_ROOT')")
    @GetMapping(path = "/{id}/images")
    @ResponseBody
    public ArrayNode getUserImages(@PathVariable("id") final int id) {
        final ArrayNode nodes = mapper.createArrayNode();
        for (final Image image : imageRepository.findAllByUserId(id)) {
            try {
                nodes.add(mapper.readTree(image.toString()));
            } catch (final JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        return nodes;
    }

    @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_USER_PREMIUM') or hasRole('ROLE_ROOT')")
    @RequestMapping(path = "{userID}/images/{imageID}", produces = { MediaType.IMAGE_JPEG_VALUE,
            MediaType.IMAGE_PNG_VALUE, "image/tiff" })
    public ResponseEntity<?> getImage(@PathVariable("userID") final int userID,
            @PathVariable("imageID") final int imageID) {
        // Image
        final Image image = imageRepository.findById(imageID).orElse(null);

        // Not found if no image
        if (image == null)
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Forbidden if public or wrong user id
        if (image.getUser() == null || image.getUser().getId() != userID)
            return new ResponseEntity<>(HttpStatus.FORBIDDEN);

        // Otherwise
        if (image.getType().equals(MediaType.valueOf("image/tiff"))) { // Check if the type is tiff
            try { // Try to convert the bytes to jpeg
                byte[] jpegContent = ImageManager.convertImageBytes(image.getData(), MediaType.IMAGE_PNG);
                return ResponseEntity.ok().contentType(image.getType()).body(jpegContent);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return ResponseEntity.ok().contentType(image.getType()).body(image.getData());
    }
}
